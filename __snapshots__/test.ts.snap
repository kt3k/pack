export const snapshot = {};

snapshot[`cmd example.ts -o example-out.js 1`] = `
'// https://jsr.io/@std/encoding/0.218.2/_util.ts
var encoder = new TextEncoder();
function getTypeName(value) {
  const type = typeof value;
  if (type !== "object") {
    return type;
  } else if (value === null) {
    return "null";
  } else {
    return value?.constructor?.name ?? "object";
  }
}
function validateBinaryLike(source) {
  if (typeof source === "string") {
    return encoder.encode(source);
  } else if (source instanceof Uint8Array) {
    return source;
  } else if (source instanceof ArrayBuffer) {
    return new Uint8Array(source);
  }
  throw new TypeError(
    \`The input must be a Uint8Array, a string, or an ArrayBuffer. Received a value of the type \${getTypeName(source)}.\`
  );
}

// https://jsr.io/@std/encoding/0.218.2/hex.ts
var hexTable = new TextEncoder().encode("0123456789abcdef");
var textEncoder = new TextEncoder();
var textDecoder = new TextDecoder();
function encodeHex(src) {
  const u8 = validateBinaryLike(src);
  const dst = new Uint8Array(u8.length * 2);
  for (let i = 0; i < dst.length; i++) {
    const v = u8[i];
    dst[i * 2] = hexTable[v >> 4];
    dst[i * 2 + 1] = hexTable[v & 15];
  }
  return textDecoder.decode(dst);
}

// example.ts
console.log(encodeHex(Uint8Array.from([0, 1, 2, 3])));
'
`;

snapshot[`cmd example.ts 1`] = `
'// https://jsr.io/@std/encoding/0.218.2/_util.ts
var encoder = new TextEncoder();
function getTypeName(value) {
  const type = typeof value;
  if (type !== "object") {
    return type;
  } else if (value === null) {
    return "null";
  } else {
    return value?.constructor?.name ?? "object";
  }
}
function validateBinaryLike(source) {
  if (typeof source === "string") {
    return encoder.encode(source);
  } else if (source instanceof Uint8Array) {
    return source;
  } else if (source instanceof ArrayBuffer) {
    return new Uint8Array(source);
  }
  throw new TypeError(
    \`The input must be a Uint8Array, a string, or an ArrayBuffer. Received a value of the type \${getTypeName(source)}.\`
  );
}

// https://jsr.io/@std/encoding/0.218.2/hex.ts
var hexTable = new TextEncoder().encode("0123456789abcdef");
var textEncoder = new TextEncoder();
var textDecoder = new TextDecoder();
function encodeHex(src) {
  const u8 = validateBinaryLike(src);
  const dst = new Uint8Array(u8.length * 2);
  for (let i = 0; i < dst.length; i++) {
    const v = u8[i];
    dst[i * 2] = hexTable[v >> 4];
    dst[i * 2 + 1] = hexTable[v & 15];
  }
  return textDecoder.decode(dst);
}

// example.ts
console.log(encodeHex(Uint8Array.from([0, 1, 2, 3])));
'
`;
